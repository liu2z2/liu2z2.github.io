<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Liu's ePortfolio - Projects</title><link href="https://liu2z2.github.io/" rel="alternate"></link><link href="https://liu2z2.github.io/feeds/projects.atom.xml" rel="self"></link><id>https://liu2z2.github.io/</id><updated>2019-12-02T00:00:00-05:00</updated><entry><title>A Chiptune Music System with OPL2 and Reality Adlib Tracker</title><link href="https://liu2z2.github.io/articles/20191202-a-chiptune-music-system-with-opl2-and-reality-adlib-tracker" rel="alternate"></link><published>2019-12-02T00:00:00-05:00</published><updated>2019-12-02T00:00:00-05:00</updated><author><name>Liu</name></author><id>tag:liu2z2.github.io,2019-12-02:/articles/20191202-a-chiptune-music-system-with-opl2-and-reality-adlib-tracker</id><summary type="html">
&lt;p&gt;The source of the project can be found &lt;a href="https://github.com/liu2z2/Chiptune"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The objective of the project is to build a system with the old-school electronic components that plays Chiptune music, as well as composing the music with compatible software. This is a project for the class Japanese Music Online during Fall 2019 …&lt;/p&gt;</summary><content type="html">
&lt;p&gt;The source of the project can be found &lt;a href="https://github.com/liu2z2/Chiptune"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The objective of the project is to build a system with the old-school electronic components that plays Chiptune music, as well as composing the music with compatible software. This is a project for the class Japanese Music Online during Fall 2019 semester.  Dr. Kazuaki Shiota was really nice to let me do this for the final project of the class. The project helped me understand the theory behind Chiptune Music from a musical and engineering standpoint. &lt;/p&gt;
&lt;h3 id="how-chiptune-music-works"&gt;How Chiptune Music Works&lt;a class="headerlink" href="#how-chiptune-music-works" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;h4 id="beeper-speakers"&gt;Beeper Speakers&lt;a class="headerlink" href="#beeper-speakers" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;In embedded systems, I have experimented generating music made by square-waves with a piezoelectric speaker. The tone of the music is adjusted by the frequency of the square waves, as a method called “Frequency Modulation (FM)”. Such “beeper speaker” system is how early home computers generate sounds, except the CPU also handles other processes as a normal PC does (Figure 1). Different tones can be played by varying the frequency of the square waves, however, it requires all of the CPU’s run-time to implement advanced sound of music. &lt;/p&gt;
&lt;h4 id="fm-synthesizer"&gt;FM Synthesizer&lt;a class="headerlink" href="#fm-synthesizer" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;To solve this issue, computers in the early 1980’s use dedicated sound chip (Figure 2), which is the early form of the sound cards in today’s computers. Except for taking the processing load away from the CPU, this method also creates possibility to develop more advanced sound generation and even synthesis. Three examples can be examined as examples.&lt;/p&gt;
&lt;figure&gt;
&lt;img src="/images/project-chiptune/fm-synth.png"/&gt;
&lt;figcaption&gt; &lt;small&gt; Figure 1 (Left) - Non-Dedicated Sound Chip; Figure 2 (Right) - Dedicated Sound Chip &lt;/small&gt; &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h4 id="nintendo-entertainment-system-nes"&gt;Nintendo Entertainment System (NES)&lt;a class="headerlink" href="#nintendo-entertainment-system-nes" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;The sound chip in NES is able to generate five channels, each of which features different types of waveforms (Figure 3). Channel #1 and #2 gives square waves, Channel #3 gives triangle waves, Channel #4 gives noise and Channel #5 is PCM sample, which modulate pre-recorded sound waves. Though the tone can be different, this method makes the music sounds like being played by the same set of instruments. &lt;/p&gt;
&lt;figure&gt;
&lt;img src="/images/project-chiptune/NES.png"/&gt;
&lt;figcaption&gt; &lt;small&gt; Figure 3 - NES Sound Chip &lt;/small&gt; &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h4 id="commodore-64"&gt;Commodore 64&lt;a class="headerlink" href="#commodore-64" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Commodore uses a different approach to synthesize music. The chip has 3 channels, each of which can produce waveforms among square, triangle and sawtooth wave (Figure 4) . Initially, engineers assign used to assign one waveform to a channel and write the tone associated with the wave. This seems inferior to the NES system as it only has 3 channels, despite that the combination of the waveforms can be variable. However, later engineers realized that waveform can be reassigned to channels on the fly, which has opened a great amount of variability to the music. This methods have been proved successful and extended to the next generation of sound card in PC. &lt;/p&gt;
&lt;figure&gt;
&lt;img src="/images/project-chiptune/C64.png"/&gt;
&lt;figcaption&gt; &lt;small&gt; Figure 4 - Commodore 64 Sound Chip &lt;/small&gt; &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h4 id="adlibsound-blaster-card"&gt;Adlib/Sound-Blaster Card&lt;a class="headerlink" href="#adlibsound-blaster-card" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;As an improved version of the Commodor 64 sound chip, the Adlib Sound Card is used in the later IBM PC. The Card is replaced with Sound Blaster later due to the market loss,  but the key component - YM3812 FM Operator chip is used in both boards. This chip is considered the foundation of computer music on IBM PC for a decade, and can even found in some Yamaha electronic piano keyboards. &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;YM3812&lt;/strong&gt; is an Frequency Modulation Operator Type-L2 (OPL2) integrated chip that can simultaneously generate 9 channels of different types of waveforms. Since this chip was widely used in early computer systems, there are still supporting documents, software, and projects related to it, so it has been determined as the core of this project as well. &lt;/p&gt;
&lt;h3 id="hardware-setup"&gt;Hardware Setup&lt;a class="headerlink" href="#hardware-setup" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Figure 5 is the hardware setup of the system in block diagram. The music file stored in the SD card is read by the microcontroller (μC). The OPL2 chip uses 4-line bus for control signal and 8-line bus for data transfer. To reduce the load on the microcontroller, the data is sent in serial first to a shift register, and then transmitted to the OPL2 chip after the conversion. The digital output of the FM operation is thereafter transferred to a DAC, whose analog output is amplified to become the eventual sound that can be played by a speaker. &lt;/p&gt;
&lt;figure&gt;
&lt;img src="/images/project-chiptune/block.png"/&gt;
&lt;figcaption&gt; &lt;small&gt; Figure 5 - Block Diagram &lt;/small&gt; &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;The detailed schematic of the system is in Figure 9. It is made in KiCAD, a free CAD software for PCB design. In order to reduce the cross-talk and noise of the system, it was decided to make the system into a PCB. After a few hours’ layout design, the final version of the board (Figure 10) is submitted to OSH Park Proto-PCB Service. &lt;/p&gt;
&lt;p&gt;The KiCAD files are available in the GitHub repository attached at the begining of the post. &lt;/p&gt;
&lt;figure&gt;
&lt;img src="/images/project-chiptune/schematic.png"/&gt;
&lt;figcaption&gt; &lt;small&gt; Figure 6 - Circuit Schematic &lt;/small&gt; &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
&lt;img src="/images/project-chiptune/pcb.png"/&gt;
&lt;figcaption&gt; &lt;small&gt; Figure 7 - PCB Demo &lt;/small&gt; &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h3 id="software"&gt;Software&lt;a class="headerlink" href="#software" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The software portion of the project consists of the controlling program on the microcontroller and the music composing software. &lt;/p&gt;
&lt;p&gt;Since the microcontroller is determined to be Arduino Uno as it’s the most available option, the controlling program is written in C++ in Arduino IDE. In addition to an external OPL2 library that handles the communication protocol, libraries such as SD and SPI are included too for the SD module board. The Arduino code is available in the GitHub repository attached at the end of the post. &lt;/p&gt;
&lt;p&gt;Reality Adlib Tacker II (Figure 11) is the software for me to compose the music. It is a music tracker with an old-school GUI but an extensive documentation. &lt;/p&gt;
&lt;figure&gt;
&lt;img src="/images/project-chiptune/reality.png"/&gt;
&lt;figcaption&gt; &lt;small&gt; Figure 8 - Reality Adlib Tracker &lt;/small&gt; &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h3 id="result-demonstration"&gt;Result Demonstration&lt;a class="headerlink" href="#result-demonstration" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Before the PCB design is manufactured, an alpha prototype is made on a breadboard, in order to test the functionality of the design. The video below demonstrates the alpha system playing a sample test music.&lt;/p&gt;
&lt;iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="" frameborder="0" height="315" src="https://www.youtube.com/embed/rFG_2tbkUiI" width="560"&gt;&lt;/iframe&gt;
&lt;p&gt;Knowing that the design is functional, the next phase was a hardware and software upgrade. Hardware-wise, the PCB was sent to the manufacturer and assembled later. Software-wise, a specific piece of music was chosen to be recreated with the Tracker by myself. The video below is the final version of the system, playing Megalovania from the game Undertale.&lt;/p&gt;
&lt;h3 id="summary-and-recommendation"&gt;Summary and Recommendation&lt;a class="headerlink" href="#summary-and-recommendation" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;To me, this multi-disciplinary project was not only successful but also meaningful. &lt;/p&gt;
&lt;p&gt;In a music standpoint, I learned how early electronic/computer music works and experienced the same method of composing it as the early 1900s game designed did. I am amazed too by the ingenuity of them making a variety of music with such limited system. Luckily, chiptune (or 8-bit) music remains as a featured style of music nowadays, which, to some extent, pays a tribute to those who used to work on electronic music composition. &lt;/p&gt;
&lt;p&gt;In an electrical engineering standpoint, this is a thorough embedded system engineering project starting from an idea, to research, design, assembly, testing and eventually realization. A lot of effort was used in designing the circuit, which is one of reasons of deciding to make a PCB. I also gained experience in audio engineering, such as signal amplification and reducing noise. &lt;/p&gt;
&lt;p&gt;Finally, some recommendations are listed for future improvement.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Instead of using Arduino Uno board, the system can be simpler by integrating Teensy board into the PCB. Thus, the system will become an actual sound card. &lt;/li&gt;
&lt;li&gt;The OPL2 library was used, but not fully understood yet. Reading through the code may help understanding the theories of operation even more.&lt;/li&gt;
&lt;li&gt;The process of loading the sound file in the SD card is time-consuming. It can be improved by developing a direct interface with PC and the system. &lt;/li&gt;
&lt;/ol&gt;</content><category term="Projects"></category><category term="project"></category></entry><entry><title>Mathematical Steady State Analysis by Plotting in Python</title><link href="https://liu2z2.github.io/articles/20191021-mathematical-steady-state-analysis-by-plotting-in-python" rel="alternate"></link><published>2019-10-21T00:00:00-04:00</published><updated>2019-10-21T00:00:00-04:00</updated><author><name>Liu</name></author><id>tag:liu2z2.github.io,2019-10-21:/articles/20191021-mathematical-steady-state-analysis-by-plotting-in-python</id><summary type="html">
&lt;p&gt;The source of the project can be found &lt;a href="https://github.com/liu2z2/nullclineplot"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This is not a whole project, but actually part of the final project on a class called Math Modelling. For the project, my friend, Wayne Stegner (Computer Engineering Undergraduate at UC), and I were supposed to model an age-based predation and …&lt;/p&gt;</summary><content type="html">
&lt;p&gt;The source of the project can be found &lt;a href="https://github.com/liu2z2/nullclineplot"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This is not a whole project, but actually part of the final project on a class called Math Modelling. For the project, my friend, Wayne Stegner (Computer Engineering Undergraduate at UC), and I were supposed to model an age-based predation and analyze the behavior of the model. This article will not focus on how we approached the model mathematically, but rather how we used Python to plot the model for the steady state analysis to avoid solving for multi-variable differential equations. &lt;/p&gt;
&lt;h3 id="background"&gt;Background&lt;a class="headerlink" href="#background" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The model was reduced to two equations in (Eq 1), where u and v are independent variables. &lt;strong&gt;Steady state&lt;/strong&gt; is where &lt;span class="math"&gt;\(\frac{du}{dt}\)&lt;/span&gt; and &lt;span class="math"&gt;\(\frac{dv}{dt}\)&lt;/span&gt; are both 0. However, it can be difficult to solve by setting both equations to 0, so we can use nullclines of &lt;span class="math"&gt;\(\frac{du}{dt}\)&lt;/span&gt; and &lt;span class="math"&gt;\(\frac{dv}{dt}\)&lt;/span&gt; instead. &lt;strong&gt;Nullcline&lt;/strong&gt; of a variable is the plot where the derivative this variable over time is 0. Therefore, the intercept of &lt;span class="math"&gt;\(u\)&lt;/span&gt; and &lt;span class="math"&gt;\(v\)&lt;/span&gt; represents steady state. Moreover, a steady state can also be &lt;strong&gt;stable&lt;/strong&gt; or &lt;strong&gt;unstable&lt;/strong&gt;. This is done by &lt;strong&gt;linear stability analysis&lt;/strong&gt;. In this specific model, it was found that the steady state is stable if the equation in Eq. 2 is positive; otherwise unstable. Thus, the discussion over steady state is around two questions.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Does steady state exist in the given domain? How many of them?&lt;/li&gt;
&lt;li&gt;Is the steady state stable?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The Python script that plots the model is supposed to give a direct answer to these two questions. &lt;/p&gt;
&lt;div class="math"&gt;$$
\frac{d}{d\tau} v = B u - v - D v (u+v) - P v \\
\frac{d}{d\tau} u = v - u (u+v) - Q u
$$&lt;/div&gt;
&lt;div style="text-align: right"&gt; Differential Equations of the Model (Eq 1) &lt;/div&gt;
&lt;div class="math"&gt;$$
D = (- 1 - Du - 2Dv - P)(-2u - v - Q) - (1 - u)(B - D v)
$$&lt;/div&gt;
&lt;div style="text-align: right"&gt; Stability Criterion (Eq 2) &lt;/div&gt;
&lt;h3 id="methodology"&gt;Methodology&lt;a class="headerlink" href="#methodology" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The two differential equations in Eq. 1 are both functions of &lt;span class="math"&gt;\(u\)&lt;/span&gt; and &lt;span class="math"&gt;\(v\)&lt;/span&gt;, so by plotting the u-nullcline and v-nullcline on a &lt;span class="math"&gt;\(u\)&lt;/span&gt;-vs-&lt;span class="math"&gt;\(v\)&lt;/span&gt; coordinate plane, steady state is where the two nullclines intercept. If they ever intercept, steady state exist, and how many intercepts dictates the number of steady states. &lt;/p&gt;
&lt;p&gt;Moreover, the &lt;span class="math"&gt;\(D\)&lt;/span&gt; variable in Eq. 2 is also a function of &lt;span class="math"&gt;\(u\)&lt;/span&gt; and &lt;span class="math"&gt;\(v\)&lt;/span&gt;, but now the criterion is its sign, or an inequality between 0. On one hand, plugging in a steady state expression that is already complicated is hard, on the other hand, graphically, such inequality separates the &lt;span class="math"&gt;\(u-v\)&lt;/span&gt; plane into two areas, positive &lt;span class="math"&gt;\(D\)&lt;/span&gt; and negative &lt;span class="math"&gt;\(D\)&lt;/span&gt;. Therefore, a contour map of this &lt;span class="math"&gt;\(D\)&lt;/span&gt; function can be superimposed onto the two nullcline plot. If their intercept is located in &lt;span class="math"&gt;\(D&amp;gt;0\)&lt;/span&gt; region, the steady state is stable; otherwise unstable. &lt;/p&gt;
&lt;h3 id="result"&gt;Result&lt;a class="headerlink" href="#result" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The plotting was successful. We were able to test the steady states by setting different external parameters (&lt;span class="math"&gt;\(B\)&lt;/span&gt;, &lt;span class="math"&gt;\(D\)&lt;/span&gt;, &lt;span class="math"&gt;\(P\)&lt;/span&gt; and &lt;span class="math"&gt;\(Q\)&lt;/span&gt;) and draw conclusions out of the testings without math-heavy calculations. Some example results are shown figures below. &lt;/p&gt;
&lt;figure&gt;
&lt;img src="/images/project-nullclineplot/plt1.webp"/&gt;
&lt;img src="/images/project-nullclineplot/plt2.webp"/&gt;
&lt;img src="/images/project-nullclineplot/plt3.webp"/&gt;
&lt;/figure&gt;
&lt;h3 id="what-i-learned-from-this"&gt;What I learned from this&lt;a class="headerlink" href="#what-i-learned-from-this" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Math sometimes can be hard and time-consuming for engineers. Luckily, with adequate programming skills, computer plotting can be helpful, making math analysis experimental. Such implementation, however, requires a clear vision on the math itself as well as an appropriate way to visualize the data. For our math modelling project, we were able to identify the two questions the analysis is based upon, and create a good method to answer both in one plot, making the program useful to the analysis. &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;For questions regarding the program or the math model itself, please contact me using the sidebar or contact Wayne Stegner at stegnewe@mail.uc.edu.&lt;/strong&gt;&lt;/p&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML';

    var configscript = document.createElement('script');
    configscript.type = 'text/x-mathjax-config';
    configscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        availableFonts: ['STIX', 'TeX']," +
        "        preferredFont: 'STIX'," +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";

    (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript);
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</content><category term="Projects"></category><category term="project"></category></entry><entry><title>Using Google Calendar API to Auto-Create Tutoring Events</title><link href="https://liu2z2.github.io/articles/20191021-using-google-calendar-api-to-auto-create-tutoring-events" rel="alternate"></link><published>2019-10-21T00:00:00-04:00</published><updated>2019-10-21T00:00:00-04:00</updated><author><name>Liu</name></author><id>tag:liu2z2.github.io,2019-10-21:/articles/20191021-using-google-calendar-api-to-auto-create-tutoring-events</id><summary type="html">
&lt;p&gt;The source of the project can be found &lt;a href="https://github.com/liu2z2/TutorCal"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This is a project I started personally since March 2019 when I worked as a peer tutor at UC Tutoring Center (previously called Learning Commons). &lt;/p&gt;
&lt;h3 id="motivation"&gt;Motivation&lt;a class="headerlink" href="#motivation" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The way Peer Tutoring works at UC is that students schedule appointments with me, and …&lt;/p&gt;</summary><content type="html">
&lt;p&gt;The source of the project can be found &lt;a href="https://github.com/liu2z2/TutorCal"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This is a project I started personally since March 2019 when I worked as a peer tutor at UC Tutoring Center (previously called Learning Commons). &lt;/p&gt;
&lt;h3 id="motivation"&gt;Motivation&lt;a class="headerlink" href="#motivation" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The way Peer Tutoring works at UC is that students schedule appointments with me, and I get email notification when they do so. TutorTrac is a system where students schedule appointments, and I see my appointments beforehand. An example of how the system looks is shown in Figure 1. However, though being a stable system maintained since 2011, TutorTrac has some inconvenient features&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It is hard for me to navigate when I use my phone to look at my schedule&lt;/li&gt;
&lt;li&gt;For every event, it shows Last name first, but we usually refer to students’ first name&lt;/li&gt;
&lt;li&gt;It only shows the class code of the assisting course instead of full name, making me hard to identify the class&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This encourages me to develop my own method of seeing the schedule.&lt;/p&gt;
&lt;figure&gt;
&lt;img src="/images/project-tutorcal/tutortrac.webp"/&gt;
&lt;figcaption&gt; &lt;small&gt; Figure 1 - TutorTrac System &lt;/small&gt; &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h3 id="design"&gt;Design&lt;a class="headerlink" href="#design" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The system reads the email notification of incoming tutoring appointments, scrapes the necessary information, and pushes it to my Google calendar in a better format. Thus I can see my schedule directly from the calendar widget of my phone (Android). Ideally it should scan the email notifications every 10-30 minutes and automatically generate events without being monitored. Additional good-to-have feature is that it will also store the appointment info at local, and try to match everyday’s schedule reminder sent from TutorTrac. Later it was found this part was hard to implement given the time, so it was deserted. &lt;/p&gt;
&lt;h4 id="design-diagram"&gt;Design diagram&lt;a class="headerlink" href="#design-diagram" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;figure&gt;
&lt;img src="/images/project-tutorcal/design.webp"/&gt;
&lt;figcaption&gt; &lt;small&gt; Figure 2 - Design Diagram &lt;/small&gt; &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h4 id="reading-uc-email-notifications"&gt;Reading UC Email Notifications&lt;a class="headerlink" href="#reading-uc-email-notifications" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;The notification received from TutorTrac follows a specific format (Figure 3). Therefore it is viable to hard-code the format into the program, making the scraping info method easier. Additionally, considering UC email is my most important mail address, as well as the fact that getting around UC server is hard and possibly not allowed, I created a rule at my UC mailbox to automatically forward any emails from TutorTrac to a gmail account I created for this project. &lt;/p&gt;
&lt;figure&gt;
&lt;img src="/images/project-tutorcal/email.webp"/&gt;
&lt;figcaption&gt; &lt;small&gt; Figure 3 - TutorTrac Email Notif &lt;/small&gt; &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h4 id="main-program"&gt;Main Program&lt;a class="headerlink" href="#main-program" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;The program is made up of three python scripts. &lt;/p&gt;
&lt;p&gt;&lt;code&gt;email_read.py&lt;/code&gt;: contains functions that reads email from Gmail account and scrape appointment info. Email interface is through imaplib module. Additionally, there is a csv look-up table, where the program can find the matching full name of the class from the course code. &lt;/p&gt;
&lt;p&gt;&lt;code&gt;google_cal.py&lt;/code&gt;: contains functions that pushes the appointment info to my Google calendar. This script is inspired by an article on Google site &lt;a href="https://developers.google.com/calendar/quickstart/python"&gt;Google Calendar API Python Quickstart&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;controller.py&lt;/code&gt;: uses the two modules and sets up the logging.&lt;/p&gt;
&lt;h4 id="hardware-implementation"&gt;Hardware Implementation&lt;a class="headerlink" href="#hardware-implementation" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;The project does not requires too much in hardware except for the ability to run Python scripts and Internet accessibility. Therefore a Raspberry Pi 3 Model B (Figure 4) was used to implement the design. VNC Viewer is used to remote control the machine wirelessly from other computers. Raspbian with Kernel verion 4.14 was installed on the board, where it was found that there is a Scheduling tool (Figure 5) that lets a command run every period of time. This can also be done by hard-coding in CRON, which is the core of scheduling tool (i.e. scheduling is a GUI of CRON). Detail info about using CRON or scheduling tool see /CRONtest/note.txt on GitHub repo. &lt;/p&gt;
&lt;figure&gt;
&lt;img src="/images/project-tutorcal/rpi.webp"/&gt;
&lt;figcaption&gt; &lt;small&gt; Figure 4 - Raspberry Pi 3 in Operation &lt;/small&gt; &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
&lt;img src="/images/project-tutorcal/rpi.webp"/&gt;
&lt;figcaption&gt; &lt;small&gt; Figure 5 - Cron Task Setup &lt;/small&gt; &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h4 id="long-term-management-and-maintenance"&gt;Long-Term Management and Maintenance&lt;a class="headerlink" href="#long-term-management-and-maintenance" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;To make sure the program runs completely without errors stopping the process, I changed the script so that the error message will show in log file while the erroneous part is passed. Using &lt;code&gt;logging&lt;/code&gt; module, the code also logs important stages in the operations (Figure 6). I also coded parts where the Internet is used to push/pull data to allow 99 retries, reducing the odds of getting bad connections. &lt;/p&gt;
&lt;figure&gt;
&lt;img src="/images/project-tutorcal/log.webp"/&gt;
&lt;figcaption&gt; &lt;small&gt; Figure 6 - Cron Task Setup &lt;/small&gt; &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h3 id="results"&gt;Results&lt;a class="headerlink" href="#results" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The project was successful. It helped me manage my tutoring schedule over the last month of the semester. I was able to see who scheduled what class at my phone easily. Figure 8 is a side-by-side comparison between TutorTrac and how it turns out in my Google calendar. &lt;/p&gt;
&lt;figure&gt;
&lt;img src="/images/project-tutorcal/gcal.webp"/&gt;
&lt;figcaption&gt; &lt;small&gt; Figure 7 - TutorTrac schedule (left, yellow blocks) vs Google Calendar (right, blue blocks) &lt;/small&gt; &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h3 id="what-i-learned-from-the-project"&gt;What I Learned From the Project&lt;a class="headerlink" href="#what-i-learned-from-the-project" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Access emails in Python with imaplib&lt;/li&gt;
&lt;li&gt;Create Google calendar events with Google API&lt;/li&gt;
&lt;li&gt;Use logging to maintain a constantly running program&lt;/li&gt;
&lt;li&gt;Create a hardware environment (Raspberry Pi) and method to support a mini-server&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="future-recommendations"&gt;Future Recommendations&lt;a class="headerlink" href="#future-recommendations" title="Permanent link"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Pushing events can be easy, but retrieving them from my calendar may be hard. For future implementation, it will be good to have an additional module to retrieve the events, check with the local record, thus making sure the schedule is correct. &lt;/p&gt;</content><category term="Projects"></category><category term="project"></category></entry></feed>